#####################################################
#               A note on expansions                #
#####################################################

# Expansions usually appear in the form ${key|default}
# If 'key' is found in the executor's map of currently known
# expansions, the corresponding value is used. If the key can
# not be found, the default is used.
#
# Arbitrary expansions can be specified in the YAML cofiguration
# files in the following places:
# - The 'expansions' field for buildvariants (branch file)
# - The 'expansions' field for distros (distros file)
#
# A number of 'built-in' expansions are also available for use; these include:
# - environment variables available on the host machine
# - 'workdir' (references the executor's work directory).
# - 'task_id' (references the task id of the task the executor is working on).
# - 'build_variant' (references the executing task's buildvariant).
# - 'config_root' (references the root directory for the executor's configuration artifacts).
# Others include:
# - 'builder'
# - 'builder_num'
# - 'builde

functions:
  "fetch source" :
    command: git.get_project
    params:
      directory: src
  "get buildnumber":
    command: keyval.inc
    params:
      key: "${build_variant}_master"
      destination: "builder_num"

  "fetch binaries" :
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: mongodb-mongo-master/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}
      bucket: mciuploads
      local_file: src/mongo-binaries.tgz

  "setup credentials" :
    command: shell.exec
    params:
      working_dir: src
      silent: true
      script: |
        cat > mci.buildlogger <<END_OF_CREDS
        slavename='${slave}'
        passwd='${passwd}'
        END_OF_CREDS

  "upload debugsymbols" :
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongo-debugsymbols.tgz
      remote_file: mongodb-mongo-master/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/x-gzip}
      build_variants:
        ['enterprise-linux-64-amazon-ami',
         'enterprise-rhel-57-64-bit',
         'enterprise-rhel-62-64-bit',
         'enterprise-rhel-70-64-bit',
         'enterprise-suse11-64',
         'enterprise-ubuntu1204-64',
         'enterprise-ubuntu1404-64',
         'enterprise-debian71-64',
         'linux-32',
         'linux-64',
         'amazon',
         'rhel55',
         'rhel62',
         'rhel70',
         'suse11',
         'ubuntu1204',
         'ubuntu1404',
         'debian71',
         'solaris-64-bit']
  "fetch debugsymbols archive" :
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: mongodb-mongo-master/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}
      bucket: mciuploads
      local_file: src/mongo-debugsymbols.tgz
      build_variants:
        ['enterprise-linux-64-amazon-ami',
         'enterprise-rhel-57-64-bit',
         'enterprise-rhel-62-64-bit',
         'enterprise-rhel-70-64-bit',
         'enterprise-suse11-64',
         'enterprise-ubuntu1204-64',
         'enterprise-ubuntu1404-64',
         'enterprise-debian71-64',
         'linux-32',
         'linux-64',
         'amazon',
         'rhel55',
         'rhel62',
         'rhel70',
         'suse11',
         'ubuntu1204',
         'ubuntu1404',
         'debian71',
         'solaris-64-bit']
  "extract binaries" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        ${decompress|unzip} mongo-binaries.tgz
  "fetch artifacts" :
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: mongodb-mongo-master/${build_variant}/${revision}/artifacts/${build_id}.tgz
      bucket: mciuploads
      extract_to: src
  "build rocksdb" :
    command: shell.exec
    params:
      script: |
        set -o errexit
        set -o verbose
        if [ "${build_rocksdb|}" = "true" ]; then
        rm -rf rocksdb
        git clone https://github.com/facebook/rocksdb.git
        cd rocksdb
        make static_lib
        fi
  "build new tools" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose

        # create the target directory for the binaries
        mkdir -p src/mongo-tools

        # clone into a different path so the binaries and package directory
        # names do not conflict
        ${gitvars} git clone https://github.com/mongodb/mongo-tools.git src/mongo-tools-repo
        cd src/mongo-tools-repo

        # make sure newlines in the scripts are handled correctly by windows
        if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
        fi;

        git checkout r2.8.0-rc5
        . ./${set_tools_gopath|set_gopath.sh}

        for i in bsondump mongostat mongofiles mongoexport mongoimport mongorestore mongodump mongotop mongooplog; do
             ${gorootvars} go build -ldflags "-X github.com/mongodb/mongo-tools/common/options.Gitspec $(git rev-parse HEAD)" ${tooltags|} -o "../mongo-tools/$i${exe|}" $i/main/$i.go
             echo $i;
        done
        exit 0

pre:
  - command: shell.exec
    params:
      silent: true
      script: |
        ${killall_mci|pkill -9 mongod; pkill -9 mongos; pkill -9 mongo; pkill -9 bsondump; pkill -9 mongoimport; pkill -9 mongoexport; pkill -9 mongodump; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongofiles; pkill -9 mongooplog; pkill -9 mongotop; pkill -9 mongobridge; pkill -9 mongod-2.6; pkill -9 mongos-2.6; pkill -9 mongo-2.6; pkill -9 bsondump-2.6; pkill -9 mongoimport-2.6; pkill -9 mongoexport-2.6; pkill -9 mongodump-2.6; pkill -9 mongorestore-2.6; pkill -9 mongostat-2.6; pkill -9 mongofiles-2.6; pkill -9 mongooplog-2.6; pkill -9 mongotop-2.6; pkill -9 mongobridge-2.6; pkill -9 mongod-2.4; pkill -9 mongos-2.4; pkill -9 mongo-2.4; pkill -9 bsondump-2.4; pkill -9 mongoimport-2.4; pkill -9 mongoexport-2.4; pkill -9 mongodump-2.4; pkill -9 mongorestore-2.4; pkill -9 mongostat-2.4; pkill -9 mongofiles-2.4; pkill -9 mongooplog-2.4; pkill -9 mongotop-2.4; pkill -9 buildlogger.py; pkill -9 smoke.py; pkill -9 python; pkill -9 cl; pkill -9 lock_mgr_test; pkill -9 background_job_test; pkill -9 repl_coordinator_impl_heartbeat_test} >/dev/null 2>&1
        rm -rf src /data/db/*
        exit 0

post:
  - command: attach.results
    params:
      file_location: src/report.json
  - command: shell.exec
    params:
      silent: true
      script: |
        ${killall_mci|pkill -9 mongod; pkill -9 mongos; pkill -9 mongo; pkill -9 bsondump; pkill -9 mongoimport; pkill -9 mongoexport; pkill -9 mongodump; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongofiles; pkill -9 mongooplog; pkill -9 mongotop; pkill -9 mongobridge; pkill -9 mongod-2.6; pkill -9 mongos-2.6; pkill -9 mongo-2.6; pkill -9 bsondump-2.6; pkill -9 mongoimport-2.6; pkill -9 mongoexport-2.6; pkill -9 mongodump-2.6; pkill -9 mongorestore-2.6; pkill -9 mongostat-2.6; pkill -9 mongofiles-2.6; pkill -9 mongooplog-2.6; pkill -9 mongotop-2.6; pkill -9 mongobridge-2.6; pkill -9 mongod-2.4; pkill -9 mongos-2.4; pkill -9 mongo-2.4; pkill -9 bsondump-2.4; pkill -9 mongoimport-2.4; pkill -9 mongoexport-2.4; pkill -9 mongodump-2.4; pkill -9 mongorestore-2.4; pkill -9 mongostat-2.4; pkill -9 mongofiles-2.4; pkill -9 mongooplog-2.4; pkill -9 mongotop-2.4; pkill -9 buildlogger.py; pkill -9 smoke.py; pkill -9 python; pkill -9 cl; pkill -9 lock_mgr_test; pkill -9 background_job_test; pkill -9 repl_coordinator_impl_heartbeat_test} >/dev/null 2>&1
        exit 0

timeout:
  - command: shell.exec
    params:
      working_dir: src
      script: |
        echo "Calling the Hang_Analyzer."
        python ./buildscripts/hang_analyzer.py

### tasks to be run for the branch ###

tasks:

## compile ##
- name: compile
  depends_on: []
  commands:
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "build new tools" #noop if ${newtools} is not "true"
    - func: "build rocksdb" # noop if ${build_rocksdb} is not "true"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          rm -rf ${install_directory|/data/mongo-install-directory}
          ${scons|scons} ${compile_flags|} --use-new-tools all dist ${msi_target|}
          ${python|python} -c "ver = open('version.txt','r').read().strip(); print 'suffix: latest' if ver[-1] == '-' else 'suffix: ' + ver; print 'version: ' + ver"  > compile_expansions.yml
          if [ "${has_debugsymbols|}" = "true" ]; then ${scons|scons} ${compile_flags|} --nostrip --use-new-tools dist; original_filename=$(ls | grep debugsymbols); mv $original_filename $(echo $original_filename | sed 's/debugsymbols-//' | sed 's/mongodb/debugsymbols-mongodb/'); fi
          ${python|python} buildscripts/smoke.py --with-cleanbb --mode files --from-file build/unittests.txt --dont-start-mongod  --report-file report.json --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} core
          mv mongodb*.${ext|tgz} mongodb-binaries.tgz
          mv debugsymbols-*.${ext|tgz} mongo-debugsymbols.tgz || true
    - command: archive.targz_pack
      params:
        target: "artifacts.tgz"
        source_dir: "src"
        include:
          - "src/mongo/db/modules/enterprise/jstests/**"
          - "compile_expansions.yml"
          - "src/mongo/db/modules/subscription/jstests/**"
          - "src/mongo/db/modules/enterprise/docs/**"
          - "*.exe"
          - "jstests/**"
          - "./test*"
          - "./dbtest*"
          - "./mongobridge*"
          - "buildscripts/**"
          - "*Example"
          - "*Test"
          - "./**.pdb"
          - "./**.msi"
        exclude_files:
          - "*_test.pdb"
    - func: "upload debugsymbols"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-binaries.tgz
        remote_file: mongodb-mongo-master/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: Binaries
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: artifacts.tgz
        remote_file: mongodb-mongo-master/${build_variant}/${revision}/artifacts/${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Artifacts

- name: lint
  depends_on: []
  commands:
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          ${scons|scons} ${compile_flags|} lint

## integration test suites ##

- name: aggregation
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} aggregation

- name: aggregation_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth aggregation

- name: audit
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} audit

- name: auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} auth

- name: dbtest
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} dbtest

- name: disk
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} disk

- name: durability
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} dur

- name: failpoints
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} failPoint

- name: failpoints_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth failPoint

- name: gle_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} gle --auth

- name: gle_auth_write_cmd
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} gle --auth --shell-write-mode commands

- name: heap1_js
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --storageEngine=heap1 --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} js

- name: jsCore
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode commands --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} jsCore

- name: jsCore_compatibility
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode compatibility --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} jsCore

- name: jsCore_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode commands --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth jsCore

- name: jsCore_small_oplog
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode commands --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --small-oplog jsCore

- name: mongo-perf
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          git clone git://github.com/mongodb/mongo-perf.git
          cd mongo-perf/mongo-cxx-driver && ${scons|scons}
          cd mongo-perf && ${scons|scons}
          cd mongo-perf && touch mongod.conf
          if [ "${build_variant|}" =  "linux-64-new-query-framework" ] ;  then cd mongo-perf && (echo "setParameter = newQueryFrameworkEnabled=1" | tee -a mongod.conf) fi
          cd mongo-perf && ${python|python} runner.py --config mongod.conf --rhost mongoperf-db.10gen.cc --port 30000 --mongod ../mongod --label ${build_variant|}

- name: mmap
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} mmap_v1

- name: mongosTest
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} mongosTest

- name: mongosTest_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth mongosTest

- name: multiversion
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          rm -rf /data/install /data/multiversion
          ${python|python} buildscripts/setup_multiversion_mongodb.py /data/install /data/multiversion "Linux/x86_64" "1.8" "2.0" "2.2" "2.4" "2.6"
          PATH=$PATH:/data/multiversion ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} multiVersion

- name: noPassthrough
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} noPassthrough

- name: noPassthroughWithMongod
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} noPassthroughWithMongod

- name: slow1
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} slow1

- name: slow2
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --clean-every=1 --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} slow2

- name: parallel
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} parallel

- name: parallel_compatibility
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode compatibility --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} parallel

- name: concurrency
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} concurrency

- name: concurrency_compatibility
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --shell-write-mode compatibility --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} concurrency

- name: replicasets
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} replSets

- name: replicasets_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth replSets

- name: replication
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} repl

- name: replication_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth repl

- name: sasl
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} sasl

- name: sharding
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} sharding

- name: sharding_auth
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} --auth sharding

- name: snmp
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          mkdir -p snmpconf
          cp -f src/mongo/db/modules/enterprise/docs/mongod.conf.master snmpconf/mongod.conf
          SNMPCONFPATH=snmpconf ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} snmp

- name: ssl
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} ssl --use-ssl

- name: sslSpecial
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} sslSpecial

- name: tool
  depends_on:
  - name: compile
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "extract binaries"
    - func: "setup credentials"
    - func: "get buildnumber"
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cp mongodb*/bin/* .
          ${python|python} buildscripts/smoke.py --nopreallocj --with-cleanbb --mongod ./mongod --mongo ./mongo --report-file report.json ${test_flags|} --buildlogger-builder MCI_${build_variant} --buildlogger-buildnum ${builder_num|} --buildlogger-credentials ./mci.buildlogger --buildlogger-phase ${task_name}_${execution} tool

- name: push
  depends_on:
  - name: "*"
  stepback: false
  commands:
    - func: "fetch artifacts"
    - func: "fetch binaries"
    - func: "fetch debugsymbols archive"
    - command: shell.exec
      params:
        working_dir: src
        silent: true
        script: |
          set -o errexit
          echo "${signing_auth_token}" > signing_auth_token
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          mv mongo-binaries.tgz mongodb-binaries.${ext|tgz}
          mv mongo-debugsymbols.tgz debugsymbols-*.${ext|tgz} || true
          cp mongodb-*.${ext|tgz} mongodb-${push_name}-${push_arch}-latest.${ext|tgz}
          cp debugsymbols-*.${ext|tgz} mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz} || true
          /usr/bin/find build/ -type f | grep msi$ | xargs -I original_filename cp original_filename mongodb-win32-${push_arch}-latest.msi || true

          notary-client.py --key-name "server-2.8" --auth-token-file ./signing_auth_token --comment "MCI Automatic Signing ${revision} - ${build_variant} - ${branch_name}" --notary-url http://notary-service.build.10gen.cc:5000 --skip-missing mongodb-${push_name}-${push_arch}-latest.${ext|tgz} mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz} mongodb-win32-${push_arch}-latest.msi
          rm signing_auth_token

    - command: expansions.update
      params:
        file: src/compile_expansions.yml

    # Put the binaries tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-latest.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}

    # Put the debug symbols
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        build_variants: ["enterprise-linux-64-amazon-ami", "enterprise-rhel-57-64-bit", "enterprise-rhel-62-64-bit", "enterprise-rhel-70-64-bit", "enterprise-suse11-64", "enterprise-ubuntu1204-64", "enterprise-ubuntu1404-64", "enterprise-debian71-64", "linux-32", "linux-64", "amazon", "rhel55", "rhel62", "rhel70", "suse11", "ubuntu1204", "ubuntu1404", "debian71", "solaris-64-bit"]
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz}
        bucket: build-push-testing
        content_type: ${content_type|application/x-gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}

    # Put the binaries tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-latest.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the debug symbols signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        build_variants: ["enterprise-linux-64-amazon-ami", "enterprise-rhel-57-64-bit", "enterprise-rhel-62-64-bit", "enterprise-rhel-70-64-bit", "enterprise-suse11-64", "enterprise-ubuntu1204-64", "enterprise-ubuntu1404-64", "enterprise-debian71-64", "linux-32", "linux-64", "amazon", "rhel55", "rhel62", "rhel70", "suse11", "ubuntu1204", "ubuntu1404", "debian71", "solaris-64-bit"]
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz}.sig
        bucket: build-push-testing
        content_type: ${content_type|application/x-gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the signed MSI file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows-64", "windows-64", "windows-64-2k8", "windows-64-2k8-ssl", "windows-32"]
        local_file: src/mongodb-win32-${push_arch}-latest-signed.msi
        bucket: build-push-testing
        content_type: application/x-msi
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi

    # Put the binaries tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-latest.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

    # Put the debug symbols sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        build_variants: ["enterprise-linux-64-amazon-ami", "enterprise-rhel-57-64-bit", "enterprise-rhel-62-64-bit", "enterprise-rhel-70-64-bit", "enterprise-suse11-64", "enterprise-ubuntu1204-64", "enterprise-ubuntu1404-64", "enterprise-debian71-64", "linux-32", "linux-64", "amazon", "rhel55", "rhel62", "rhel70", "suse11", "ubuntu1204", "ubuntu1404", "debian71", "solaris-64-bit"]
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz}.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1

    # Push the signed MSI sha1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows-64", "windows-64", "windows-64-2k8", "windows-64-2k8-ssl", "windows-32"]
        local_file: src/mongodb-win32-${push_arch}-latest-signed.msi.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.sha1

    # Put the binaries tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-latest.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the debug symbols sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-linux-64-amazon-ami", "enterprise-rhel-57-64-bit", "enterprise-rhel-62-64-bit", "enterprise-rhel-70-64-bit", "enterprise-suse11-64", "enterprise-ubuntu1204-64", "enterprise-ubuntu1404-64", "enterprise-debian71-64", "linux-32", "linux-64", "amazon", "rhel55", "rhel62", "rhel70", "suse11", "ubuntu1204", "ubuntu1404", "debian71", "solaris-64-bit"]
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz}.sha256
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the signed MSI sha256
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows-64", "windows-64", "windows-64-2k8", "windows-64-2k8-ssl", "windows-32"]
        local_file: src/mongodb-win32-${push_arch}-latest-signed.msi.sha256
        bucket: build-push-testing
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.sha256
        content_type: text/plain

    # Put the binaries tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-latest.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the debug symbols md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-linux-64-amazon-ami", "enterprise-rhel-57-64-bit", "enterprise-rhel-62-64-bit", "enterprise-rhel-70-64-bit", "enterprise-suse11-64", "enterprise-ubuntu1204-64", "enterprise-ubuntu1404-64", "linux-32", "linux-64", "amazon", "rhel55", "rhel62", "rhel70", "suse11", "ubuntu1204", "ubuntu1404", "debian71", "solaris-64-bit"]
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-latest.${ext|tgz}.md5
        bucket: build-push-testing
        content_type: text/plain
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the signed MSI md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows-64", "windows-64", "windows-64-2k8", "windows-64-2k8-ssl", "windows-32"]
        local_file: src/mongodb-win32-${push_arch}-latest-signed.msi.md5
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.md5

    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        s3_copy_files:
            #Binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Debug Symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
               'build_variants':
                  ['enterprise-linux-64-amazon-ami',
                   'enterprise-rhel-57-64-bit',
                   'enterprise-rhel-62-64-bit',
                   'enterprise-suse11-64',
                   'enterprise-ubuntu1204-64',
                   'enterprise-ubuntu1404-64',
                   'enterprise-debian71-64',
                   'linux-32',
                   'linux-64',
                   'amazon',
                   'rhel55',
                   'rhel62',
                   'rhel70',
                   'suse11',
                   'ubuntu1204',
                   'ubuntu1404',
                   'debian71',
                   'solaris-64-bit']
              }

            #MSI (Windows only)
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-win32-${push_arch}-${suffix}-signed.msi', 'bucket': '${push_bucket}'},
               'build_variants': [ 'enterprise-windows-64', 'windows-64', 'windows-64-2k8', 'windows-64-2k8-ssl', 'windows-32' ] }

            #Binaries Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #Debug Symbols Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'},
               'build_variants':
                  ['enterprise-linux-64-amazon-ami',
                   'enterprise-rhel-57-64-bit',
                   'enterprise-rhel-62-64-bit',
                   'enterprise-suse11-64',
                   'enterprise-ubuntu1204-64',
                   'enterprise-ubuntu1404-64',
                   'enterprise-debian71-64',
                   'linux-32',
                   'linux-64',
                   'amazon',
                   'rhel55',
                   'rhel62',
                   'rhel70',
                   'suse11',
                   'ubuntu1204',
                   'ubuntu1404',
                   'debian71',
                   'solaris-64-bit']
              }

            #SHA1 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA1 for debug symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'},
               'build_variants': [
                   'enterprise-linux-64-amazon-ami',
                   'enterprise-rhel-57-64-bit',
                   'enterprise-rhel-62-64-bit',
                   'enterprise-suse11-64',
                   'enterprise-ubuntu1204-64',
                   'enterprise-ubuntu1404-64',
                   'enterprise-debian71-64',
                   'linux-32',
                   'linux-64',
                   'amazon',
                   'rhel55',
                   'rhel62',
                   'rhel70',
                   'suse11',
                   'ubuntu1204',
                   'ubuntu1404',
                   'debian71',
                   'solaris-64-bit'
                ]
              }

            #SHA1 for MSI
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-win32-${push_arch}-${suffix}-signed.msi.sha1', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows-64', 'windows-64', 'windows-64-2k8', 'windows-64-2k8-ssl', 'windows-32'] }

            #SHA256 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #SHA256 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'},
               'build_variants': [
                   'enterprise-linux-64-amazon-ami',
                   'enterprise-rhel-57-64-bit',
                   'enterprise-rhel-62-64-bit',
                   'enterprise-suse11-64',
                   'enterprise-ubuntu1204-64',
                   'enterprise-ubuntu1404-64',
                   'enterprise-debian71-64',
                   'linux-32',
                   'linux-64',
                   'amazon',
                   'rhel55',
                   'rhel62',
                   'rhel70',
                   'suse11',
                   'ubuntu1204',
                   'ubuntu1404',
                   'debian71',
                   'solaris-64-bit'
               ]}

            #SHA256 for MSI files
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-win32-${push_arch}-${suffix}-signed.msi.sha256', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows-64', 'windows-64', 'windows-64-2k8', 'windows-64-2k8-ssl', 'windows-32'], }


            #MD5 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

            #MD5 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'},
               'build_variants': [
                  'enterprise-linux-64-amazon-ami',
                  'enterprise-rhel-57-64-bit',
                  'enterprise-rhel-62-64-bit',
                  'enterprise-suse11-64',
                  'enterprise-ubuntu1204-64',
                  'enterprise-ubuntu1404-64',
                  'linux-32',
                  'linux-64',
                  'amazon',
                  'rhel55',
                  'rhel62',
                  'rhel70',
                  'suse11',
                  'ubuntu1204',
                  'ubuntu1404',
                  'debian71',
                  'solaris-64-bit']
                }

            #MD5 for MSIs
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-win32-${push_arch}-${suffix}-${task_id}-signed.msi.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-win32-${push_arch}-${suffix}-signed.msi.md5', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows-64', 'windows-64', 'windows-64-2k8', 'windows-64-2k8-ssl', 'windows-32'], }
    - command: shell.exec
      params:
        working_dir: src
        script: |
          ssh distro-deb2.build.10gen.cc sudo -H -u ubuntu /home/ubuntu/git/kernel-tools/releases/publish_packages/publish_packages.sh master ${version} ${revision} || true

### modules ###

modules:
- name: enterprise
  repo: git@github.com:10gen/mongo-enterprise-modules.git
  prefix: src/mongo/db/modules
  branch: master

- name: bdb
  repo: git@github.com:10gen/bdb-module.git
  prefix: src/mongo/db/modules
  branch: master

#######################################
# Buildvariants
#######################################

buildvariants:

###########################################
#     Experimental buildvariants          #
###########################################

- name: ubuntu1404-rocksdb
  display_name: Ubuntu 14.04 64-bit (RocksDB)
  run_on:
  - ubuntu1404-test
  expansions:
    build_rocksdb: true
    compile_flags: --c++11 -j$(grep -c ^processor /proc/cpuinfo) --dbg=off --opt=on --cpppath=$(readlink -f ../rocksdb/include/) --libpath=$(readlink -f ../rocksdb/) --extralib=rocksdb --rocksdb --cc=/opt/mongodbtoolchain/bin/gcc --cxx=/opt/mongodbtoolchain/bin/g++ --variant-dir=release
    test_flags: --continue-on-failure --storageEngine=RocksDB
  tasks:
  - name: compile
    distros:
    - ubuntu1404-build
  - name: lint
  - name: aggregation
  - name: aggregation_auth
  - name: auth
  - name: dbtest
  # - name: disk
  # - name: durability
  - name: failpoints
  - name: failpoints_auth
  - name: gle_auth
  - name: gle_auth_write_cmd
  - name: jsCore
  - name: jsCore_auth
  - name: jsCore_compatibility
  - name: jsCore_small_oplog
  - name: noPassthrough
  - name: noPassthroughWithMongod
  - name: parallel
  - name: parallel_compatibility
  - name: concurrency
  - name: concurrency_compatibility
  - name: replicasets
  - name: replicasets_auth
  - name: replication
  - name: replication_auth
  - name: sharding
  - name: sharding_auth
  - name: slow1
  - name: slow2
